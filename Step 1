Project 6 consists of two parts:

Step 1: Configure storage subsystem for Web and Database servers based on Linux OS. The focus of this part is to give you practical experience of working with disks, partitions and volumes in Linux.

Step 2: Install WordPress and connect it to a remote MySQL database server. This part of the project will solidify your skills of deploying Web and DB tiers of Web solution.

As a DevOps engineer, your deep understanding of core components of web solutions and ability to troubleshoot them will play essential role in your further progress and development.

Three-tier Architecture

Generally, web, or mobile solutions are implemented based on what is called the Three-tier Architecture.

Three-tier Architecture is a client-server software architecture pattern that comprise of 3 separate layers.

Presentation Layer (PL): This is the user interface such as the client server or browser on your laptop.
Business Layer (BL): This is the backend program that implements business logic. Application or Webserver
Data Access or Management Layer (DAL): This is the layer for computer data storage and data access. Database Server or File System Server such as FTP server, or NFS Server.

For this project we need;
A Laptop or PC to serve as a client
An EC2 Linux Server as a web server (This is where you will install WordPress)
An EC2 Linux server as a database (DB) server

Use RedHat OS for this.

Note: for Ubuntu server, when connecting to it via SSH/Putty or any other tool, we used ubuntu user, but for RedHat you will need to use ec2-user user. Connection string will look like ec2-user@

Step 1 — Prepare a Web Server

Launch an EC2 instance that will serve as "Web Server". Create 3 volumes in the same AZ as your Web Server EC2, each of 10 GiB. Learn How to Add EBS Volume to an EC2 instance here

Create 3 volumes, attach volumes to different servers (web / database)

Use lsblk / Use df -h command to see all mounts and free space on your server and command to inspect what block devices are attached to the server. Notice names of your newly created devices. All devices in Linux reside in /dev/ directory. Inspect it with ls /dev/ and make sure you see all 3 newly created block devices there — their names will likely be xvdf, xvdg, nvme.

Install lvm2 package using sudo yum install lvm2. Run sudo lvmdiskscan command to check for available partitions.

Use gdisk utility to create a single partition on each of the 3 disks
sudo gdisk /dev/nvme1n1. 

#should prompt :
 GPT fdisk (gdisk) version 1.0.3
Partition table scan:
  MBR: not present
  BSD: not present
  APM: not present
  GPT: not present
Creating new GPT entries in memory.

Use pvcreate utility to mark each of 3 disks as physical volumes (PVs) to be used by LVM
sudo pvcreate /dev/nvme0n1
sudo pvcreate /dev/nvme1n1

Verify that your Physical volume has been created successfully by running 
- sudo pvs
Use vgcreate utility to add all 3 PVs to a volume group (VG). Name the VG webdata-vg
sudo vgcreate webdata-vg /dev/nvme1n1 /dev/nvme0n1
Verify that your VG has been created successfully by running
sudo vgs
Use lvcreate utility to create 2 logical volumes. apps-lv (Use half of the PV size), and logs-lv Use the remaining space of the PV size. NOTE: apps-lv will be used to store data for the Website while, logs-lv will be used to store data for logs.
sudo lvcreate -n apps-lv -L 8G webdata-vg
sudo lvcreate -n logs-lv -L 4G webdata-vg

Use sudo lvs to verify if logical volumes have been created

Verify the setup and configuration
— sudo vgdisplay -v #view complete setup - VG, PV, and LV
— sudo lsblk
Use mkfs.ext4 to format the logical volumes with ext4 filesystem
— sudo mkfs -t ext4 /dev/webdata-vg/apps-lv
— sudo mkfs -t ext4 /dev/webdata-vg/logs-lv
Create /var/www/html directory to store website files
— sudo mkdir -p /var/www/html
Create /home/recovery/logs to store backup of log data
— sudo mkdir -p /home/recovery/logs
Mount /var/www/html on apps-lv logical volume
— sudo mount /dev/webdata-vg/apps-lv /var/www/html/
Use rsync utility to backup all the files in the log directory /var/log into/home/recovery/logs (This is required before mounting the file system)
— sudo rsync -av /var/log/. /home/recovery/logs/
Mount /var/log on logs-lv logical volume. (Note that all the existing data on /var/log will be deleted. That is why step 15 above is very important)
— sudo mount /dev/webdata-vg/logs-lv /var/log
Restore log files back into /var/log directory
— sudo rsync -av /home/recovery/logs/. /var/log

The UUID of the device will be used to update the /etc/fstab file and Update /etc/fstab in this format using your own UUID and rememeber to remove the leading and ending quotes.
sudo blkid

sudo vi /etc/fstab
(Replace UUID for webdata vg and file location with /db for database server)
UUID=c38b570d-c458–46c0-ac5a-2aa59ac35b6a /var/www/html ext4 defaults 0 0
UUID=7f7ddf73-c70d-48fd-9a2c-a00e1cf1bfbf /var/log ext4 defaults 0 0

Test the configuration and reload the daemon and verify setup is running
sudo mount -a
sudo systemctl daemon-reload
df -h

